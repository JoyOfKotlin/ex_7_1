/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ex_7_1

import kotlin.time.measureTimedValue

sealed class Either<E, out A> {
    abstract fun <B>  map(f: (A)-> B): Either <E,B>
    abstract fun <B> flatMap(f:(A)->Either<E,B>): Either<E,B>

    fun getOrElse(defaultValue:()-> @UnsafeVariance A): A =
        when (this) {
            is Right -> this.value
            is Left -> defaultValue()
        }

    fun orElse(defaultValue:()->Either<E,@UnsafeVariance A>) : Either <E,A> =
        map {this}.getOrElse(defaultValue)

    internal class Left <E, out A> (internal val value : E) : Either <E,A>() {
                override fun toString(): String = "Left($value)"
                override fun <B> map (f: (A)->B): Either <E,B>  =Left(value)
                override fun <B> flatMap(f:(A)->Either<E,B>): Either<E,B> = Left(value)
            }

    internal class Right <E, out A> (internal val value: A) : Either<E,A>() {
                override fun toString(): String = "Right($value)"
                override fun <B> map (f: (A)->B): Either<E,B> = Right(f(value))
                override fun <B> flatMap(f:(A)-> Either<E,B>) : Either <E,B> = f(value)
            }

    companion object {
        fun <E,A> left (value:E): Either<E,A> = Left  (value)
        fun <E,A> right(value:A): Either<E,A> = Right (value)
    }

}

fun <A:Comparable<A>> max(list: List<A>): Either<String,A> = when(list) {
    is List.Nil ->Either.left("max called on an empty list")
    is List.Cons->Either.right(list.foldLeft(list.head){  x-> { y-> if(x.compareTo(y)>=0) x else y  } } )
    }
fun mod3(a: Int): Either<String,Int> =
    if (a == 0) Either.left("It is give nothing to divide 0")
    else Either.right(a%3)



class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    val testLeft=max(List<Int>())
    println(testLeft)
    val testRight=max(List<Int>(1,5,10))
    println(testRight)

    println("\n")
    println(testLeft.map({it*10}))
    println(testRight.map({it*10}))

    println("\n")
    println(testLeft.flatMap { mod3(it) })
    println(testRight.flatMap { mod3(it) })

    val testZero=max(List<Int>(-1,-5,-10,0))
    println(testZero.flatMap { mod3(it) })
}
